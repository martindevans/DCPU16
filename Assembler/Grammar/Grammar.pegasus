@namespace Assembler.Grammar
@classname Parser

@using System.Globalization
@using Assembler.Grammar.AST
@using Assembler.Grammar.AST.Instructions
@using Assembler.Grammar.AST.Operands
@using DCPU16

primary <AsmFile> -memoize
    = l:line<0,,newline> _ EOF { new AsmFile(l.ToList()) }

line <Line>
    = _ l:label? _ i:instruction? _ c:comment? { new Line(l.SingleOrDefault(), i.SingleOrDefault()) }

comment <string>
    = ";" c:(!newline .)* { string.Concat(c) }

label <string>
    = ":" l:identifier { l }

instruction <BaseInstruction>
    = o:basic_opcode _ b:operand_b _ "," _ a:operand_a { new BasicInstruction(o, a, b) }
    / o:special_opcode _ a:operand_a { new SpecialInstruction(o, a) }
    / o:parameterless_special_opcode { new ParameterlessSpecialInstruction(o) }
    / "DAT"i _ n:number<1,,_ "," _> { new DatInstruction(n.ToList()) }
    / "DAT"i _ s:string { new DatInstruction(s) }

basic_opcode <BasicOpcode>
    = "SET"i { BasicOpcode.SET }
    / "ADD"i { BasicOpcode.ADD }
    / "SUB"i { BasicOpcode.SUB }
    / "MUL"i { BasicOpcode.MUL }
    / "MLI"i { BasicOpcode.MLI }
    / "DIV"i { BasicOpcode.DIV }
    / "DVI"i { BasicOpcode.DVI }
    / "MOD"i { BasicOpcode.MOD }
    / "MDI"i { BasicOpcode.MDI }
    / "AND"i { BasicOpcode.AND }
    / "BOR"i { BasicOpcode.BOR }
    / "XOR"i { BasicOpcode.XOR }
    / "SHR"i { BasicOpcode.SHR }
    / "ASR"i { BasicOpcode.ASR }
    / "SHL"i { BasicOpcode.SHL }
    / "IFB"i { BasicOpcode.IFB }
    / "IFC"i { BasicOpcode.IFC }
    / "IFE"i { BasicOpcode.IFE }
    / "IFN"i { BasicOpcode.IFN }
    / "IFG"i { BasicOpcode.IFG }
    / "IFA"i { BasicOpcode.IFA }
    / "IFL"i { BasicOpcode.IFL }
    / "IFU"i { BasicOpcode.IFU }
    / "ADX"i { BasicOpcode.ADX }
    / "SBX"i { BasicOpcode.SBX }
    / "STI"i { BasicOpcode.STI }
    / "STD"i { BasicOpcode.STD }

special_opcode <SpecialOpcode>
    = "JSR"i { SpecialOpcode.JSR }
    / "INT"i { SpecialOpcode.INT }
    / "IAG"i { SpecialOpcode.IAG }
    / "IAS"i { SpecialOpcode.IAS }
    / "RFI"i { SpecialOpcode.RFI }
    / "IAQ"i { SpecialOpcode.IAQ }
    / "HWN"i { SpecialOpcode.HWN }
    / "HWQ"i { SpecialOpcode.HWQ }
    / "HWI"i { SpecialOpcode.HWI }

parameterless_special_opcode <SpecialOpcode>
    = "HCF"i { SpecialOpcode.HCF }
    / "NOP"i { SpecialOpcode.Reserved }

operand_a <BaseOperand>
    = s:small_number { new SmallLiteral(s) }
    / "POP"i { new PushPop(false) }
    / operand

operand_b <BaseOperand>
    = "PUSH"i { new PushPop(true) }
    / operand

operand <BaseOperand> -memoize
    = "[" _ r:register _ "]" { new IndirectRegister(r) }
    / r:register ![a-zA-Z_] { new RegisterValue(r) }
    / n:number { new NextWordLiteral(n) }
    / "[" _ n:number _ "]" { new IndirectNextWord(n) }
    / "[" _ r:register _ "+" _ n:number  _"]" { new IndirectRegisterNextWord(r, n) }
    / "[" _ n:number _ "+" _ r:register  _"]" { new IndirectRegisterNextWord(r, n) }

register <Register>
    = "A"i { Register.A }
    / "B"i { Register.B }
    / "C"i { Register.C }
    / "X"i { Register.X }
    / "Y"i { Register.Y }
    / "Z"i { Register.Z }
    / "I"i { Register.I }
    / "J"i { Register.J }
    / "PC"i { Register.PC }
    / "EX"i { Register.EX }
    / "SP"i { Register.SP }

small_number <int>
    = n:integer &{n >= -1 && n <= 30} { n }

number <Number>
    = h:hex_number { new Number(h) }
    / d:decimal_number { new Number(d) }
    / i:identifier { new Number(i) }

integer <int>
    = hex_number
    / decimal_number

decimal_number <int>
    = s:("-"? [0-9]+) { int.Parse(s) }

hex_number <int>
    = s:("0" [xX] [0-9a-fA-F]+) { System.Convert.ToInt32(s, 16) }

identifier <string>
    = s:([a-zA-Z_][a-zA-Z0-9_]<0,>) { string.Join("", s) }

string <String>
    = "\"" chars:unicode* ("\"" / #ERROR{ "Expected '\"'" }) { string.Concat(chars) }

unicode
    = c:. !{c == "\\" || c == "\"" || char.IsControl(c[0])} { c }
    / "\\" c:(
        e:["\/\\] { e } /
        "b" { "\b" } /
        "f" { "\f" } /
        "n" { "\n" } /
        "r" { "\r" } /
        "t" { "\t" } /
        "u" digits:("" [0-9A-F]i<4>) { ((char)Convert.ToInt32(digits, 16)).ToString() }
    ) { c }

newline
    = "\r\n"
    / "\n"
    / "\r"

_
    = [ \t]*

EOF
    = !.
    / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }