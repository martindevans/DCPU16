; https://gist.githubusercontent.com/getpixel-zz/2384848/raw/51d890082c37d814dfd398da48e3dc1670840406/gistfile1.dasm16
;
; DCPU16 Pacman by Getpixel
;
; Move Pacman : W, S, A, D
; Pause game  : P
;
; IMPORTANT change :gamespeed (last line) value to suit your emulator speed
; lower value = faster game

;;; GAME STRUCTURE ;;;

:setup
	JSR createdotmap
	JSR drawmap
	JSR drawpacman
	JSR drawghosts
	JSR drawscoreboard
	JSR drawscore
	SET PC, mainloop

:mainloop
        JSR keyboard
	IFE [pause], 1
		SET PC, mainloop
	JSR events
	JSR updatedraw
	SET PC, mainloop

:events
	JSR updateprevious
	JSR moveghosts
	JSR checkdead
	JSR movepacman
	JSR checktime
	JSR checkscore
	JSR updaterandom
	SET PC, POP
	
:updatedraw
	JSR drawscore
	JSR drawprevious
	JSR drawpacman
	JSR drawghosts
	JSR wait
	SET PC, POP

;;; SPEED CONTROL ;;;

; wait for a while
:wait
	SET I, [gamespeed]
	:wait_loop
		IFE I, 0
			SET PC, POP
		SUB I, 1
		SET PC, wait_loop
	
;;; GAME EVENTS ;;;

; check if there is a wall at X, Y
; if so, set C to 1
:checkwall
	SET C, 1
	IFE X, 0
		SET PC, POP
	IFE X, 17
		SET PC, POP
	IFE Y, 0
		SET PC, POP
	IFE Y, 13
		SET PC, POP
	SET A, [wallmap+Y]
	SET B, X
	SUB B, 1
	SET C, 0x8000
	SHR C, B
	AND A, C
	IFN A, 0
		SET C, 1
	IFE A, 0
		SET C, 0
	SET PC, POP

; check if there is a dot at X, Y
:checkdot
	SET C, 0
	IFE X, 0
		SET PC, POP
	IFE X, 17
		SET PC, POP
	IFE Y, 0
		SET PC, POP
	IFE Y, 13
		SET PC, POP
	SET A, [dotmap+Y]
	SET B, X
	SUB B, 1
	SET J, 0x8000
	SHR J, B
	AND A, J
	IFN A, 0
		SET C, 1
	IFE A, 0
		SET C, 0
	SET PC, POP

; check if pacman collided with a ghost on the previous frame
:checkghost
	SET X, [previous]
	SET I, 1
	SET Y, [previous+I]
	ADD I, 1
	SET C, 0
	:checkghost_loop
		IFE I, 12
			SET PC, POP
		SET A, 0
		IFE X, [previous+I]
			ADD A, 1
		ADD I, 1
		IFE Y, [previous+I]
			ADD A, 1
		IFE A, 2
			SET C, 1
		ADD I, 1
		SET PC, checkghost_loop

; check if X, Y is a warp point
:checkwarp
	SET C, 0
	IFN Y, 8
		SET PC, POP
	IFE X, 1
		SET C, 1
	IFE X, 16
		SET C, 1
	SET PC, POP

; change our "random" number, based on pacman's position and direction	
:updaterandom
	SET I, 1
	SET [random], [pacman+I]
	SET I, 2
	ADD [random], [pacman+I]
	SET I, 3
	ADD [random], [pacman+I]
	MOD [random], 4
	SET PC, POP

; store the current positions of ghosts and pacman before they move
:updateprevious
	SET I, 1
	SET J, 0
	SET [previous], [pacman+I]
	ADD I, 1
	ADD J, 1
	SET [previous+J], [pacman+I]
	SET I, 1
	ADD J, 1
	:loopghosts
		SET [previous+J], [ghosts+I]
		ADD J, 1
		ADD I, 1
		SET [previous+J], [ghosts+I]
		ADD J, 1
		ADD I, 3
		IFE I, 17
			SET PC, POP
		SET PC, loopghosts

; Reminder: this routine stands upon the edge of a knife
; stray but a little and it will BREAK EVERYTHING
; (don't change a thing)
:moveghosts
	SET I, 1
	:moveghosts_loop
		IFE I, 17
			SET PC, POP
		SET J, I
		JSR processghost
		SET I, J
		SET [ghosts+I], X
		ADD I, 1
		SET [ghosts+I], Y
		ADD I, 3
		SET PC, moveghosts_loop
	:processghost
		SET I, J
		SET X, [ghosts+I]
		ADD I, 1
		SET Y, [ghosts+I]
		ADD I, 1
		IFE [ghosts+I], 0
			SUB Y, 1
		IFE [ghosts+I], 1
			ADD X, 1
		IFE [ghosts+I], 2
			ADD Y, 1
		IFE [ghosts+I], 3
			SUB X, 1
		JSR checkwall
		IFE C, 1
			JSR changedir
		SET I, J
		ADD I, 3
		SUB [ghosts+I], 1
		IFE [ghosts+I], 0
			JSR changedir
		SET I, J
		ADD I, 3
		IFE [ghosts+I], 0
			SET [ghosts+I], 10
		SET PC, POP
	:changedir
		SET A, [random]
		SET I, J
		ADD I, 3
		ADD A, [ghosts+I]
		MOD A, 4
		:changedir_loop
			SET I, J
			SET X, [ghosts+I]
			ADD I, 1
			SET Y, [ghosts+I]
			IFE A, 0
				SUB Y, 1
			IFE A, 1
				ADD X, 1
			IFE A, 2
				ADD Y, 1
			IFE A, 3
				SUB X, 1
			SET I, A
			JSR checkwall
			SET A, I
			SET I, J
			ADD I, 2
			IFE C, 0
				SET [ghosts+I], A
			IFE C, 0
				SET PC, POP
			ADD A, 1
			MOD A, 4
			SET PC, changedir_loop

:movepacman
	JSR animatepacman
	SET I, 2
	SET Y, [pacman+I]
	SET I, 1
	SET X, [pacman+I]
	SET I, 3
	IFE [pacman+I], 0
		SUB Y, 1
	IFE [pacman+I], 1
		ADD X, 1
	IFE [pacman+I], 2
		ADD Y, 1
	IFE [pacman+I], 3
		SUB X, 1
	JSR checkwall
	IFE C, 1
		SET PC, movepacman_warp
	SET I, 1
	SET [pacman+I], X
	SET I, 2
	SET [pacman+I], Y
	SET PC, POP
	:movepacman_warp
		SET I, 2
		SET Y, [pacman+I]
		SET I, 1
		SET X, [pacman+I]
		JSR checkwarp
		IFE C, 0
			SET PC, POP
		ADD X, 15
		IFE X, 31
			SET X, 1
		SET [pacman+I], X
		SET PC, POP
	:animatepacman
		SET I, 4
		ADD [pacman+I], 1
		IFE [pacman+I], 4
			SET [pacman+I], 1
		SET A, [pacman+I]
		IFE A, 0
			SET [pacman], 0xe043
		IFE A, 1
			SET [pacman], 0xe043
		IFE A, 2
			SET [pacman], 0xe06f
		IFE A, 3
			SET [pacman], 0xe063
		SET PC, POP

; increment timer
:checktime
	ADD [gametime], 1
	SET PC, POP

; check if pacman is standing on a dot
; remove said dot and award 10 points
; check if pacman is victorious
:checkscore
	SET I, 1
	SET X, [pacman+I]
	SET I, 2
	SET Y, [pacman+I]
	JSR checkdot
	IFE C, 0
		SET PC, POP
	ADD [score], 10
	IFG [score], 1290
		SET PC, winscreen
	SET J, 0x8000
	SUB X, 1
	SHR J, X
	XOR [dotmap+Y], J
	SET PC, POP

; check if pacman has collided with a ghost
; reduce health and check if the game is over
:checkdead
	JSR checkghost
	IFE C, 0
		SET PC, POP
	SUB [lives], 1
	JSR updatedraw
	IFG [lives], 0
		SET PC, resetpacman
	JSR drawscore
	SET PC, deathscreen
	:resetpacman
		SET I, 1
		SET [pacman+I], 1
		SET I, 2
		SET [pacman+I], 1
		SET PC, POP
	
;;; PAUSE AND ENDGAME ;;;

:pausegame
	XOR [pause], 1
	SET Y, 0
	SET I, 0
	IFE [pause], 0
		SET PC, pausegame_clear
	:pausegame_write
		SET [vbo], [pausetext+I]
		BOR [vbo], 0xf080
		SET X, I
		JSR drawxy
		ADD I, 1
		IFE I, 10
			SET PC, POP
		SET PC, pausegame_write
	:pausegame_clear
		SET [vbo], 0
		SET X, I
		JSR drawxy
		ADD I, 1
		IFE I, 10
			SET PC, POP
		SET PC, pausegame_clear

; display some uplifting text and kill the game
:winscreen
        JSR updatedraw
	SET X, 4
	SET Y, 6
	SET I, 0
	:winscreen_loop
		SET [vbo], [wintext+I]
		BOR [vbo], 0xf080
		JSR drawxyoffset
		ADD X, 1
		ADD I, 1
		IFE I, 7
			SET PC, winscreen_incr
		IFE I, 15
			SET PC, killgame
		SET PC, winscreen_loop
	:winscreen_incr
		ADD Y, 1
		SET X, 4
		SET PC, winscreen_loop

; scold the player and kill the game
:deathscreen
	SET X, 4
	SET Y, 6
	SET I, 0
	:deathscreen_loop
		SET [vbo], [failtext+I]
		BOR [vbo], 0xf080
		JSR drawxyoffset
		ADD X, 1
		ADD I, 1
		IFE I, 7
			SET PC, deathscreen_incr
		IFE I, 19
			SET PC, deadpacman
		SET PC, deathscreen_loop
	:deathscreen_incr
		ADD Y, 1
		SET X, 4
		SET PC, deathscreen_loop
	:deadpacman
		SET [vbo], 0xe078
		BOR [vbo], 0x0080
		SET I, 1
		SET X, [pacman+I]
		SET I, 2
		SET Y, [pacman+I]
		JSR drawxyoffset
		SET PC, killgame

:killgame
	SET PC, killgame

; create a dot map from the wall map (using XOR)
; the dot and wall maps are 12 words each
:createdotmap
	SET I, 1
	:createdotmap_loop
		SET [dotmap+I], 0xffff
		XOR [dotmap+I], [wallmap+I]
		ADD I, 1
		IFE I, 13
			SET PC, POP
		SET PC, createdotmap_loop

;;; KEYBOARD INPUT ;;;

:keyboard
	SET I, [keypointer]
	IFE [I], 0
		SET PC, POP
	ADD [keypointer], 1
	IFE [keypointer], 0x9010
		SET [keypointer], 0x9000
	SET A, [I]
	SET [I], 0
	JSR processkey
	SET PC, POP

:processkey
	SET J, 3
	IFE A, 87
		SET [pacman+J], 0
	IFE A, 83
		SET [pacman+J], 2
	IFE A, 65
		SET [pacman+J], 3
	IFE A, 68
		SET [pacman+J], 1
    IFE A, 119
		SET [pacman+J], 0
	IFE A, 115
		SET [pacman+J], 2
	IFE A, 97
		SET [pacman+J], 3
	IFE A, 100
		SET [pacman+J], 1
	IFE A, 80
		JSR pausegame
	SET [0x9000+I], 0
	SET PC, POP	
	
;;; DRAWING ;;;

; draw the contents of [vbo] to [0x8000 +X +Y*32]
:drawxy
	MUL Y, 32
	ADD Y, X
	SET [0x8000+Y], [vbo]
	SUB Y, X
	DIV Y, 32
	SET PC, POP

; draw the contents of [vbo] to [0x8000 +X +(Y-1)*32]
:drawxyoffset
	MUL Y, 32
	ADD Y, X
	ADD Y, [offset]
	SUB Y, 32
	SET [0x8000+Y], [vbo]
	ADD Y, 32
	SUB Y, [offset]
	SUB Y, X
	DIV Y, 32
	SET PC, POP

; this is only called once
; draw the contents of wallmap and dotmap, which are 12 words each
:drawmap
	SET X, 1
	SET Y, 1
	SET J, 0x8000
	:drawmap_loopx
		IFE X, 17
			SET PC, drawmap_loopy
		SET A, [wallmap+Y]
		AND A, J
		IFN A, 0
			JSR drawwall
		SET A, [dotmap+Y]
		AND A, J
		IFN A, 0
			JSR drawdot
		SHR J, 1
		ADD X, 1
		SET PC, drawmap_loopx
	:drawmap_loopy
		IFE Y, 13
			SET PC, drawmap_walloff
		SET J, 0x8000
		SET X, 1
		ADD Y, 1
		SET PC, drawmap_loopx
	:drawmap_walloff
		IFE Y, 0
			SET PC, drawmap_clearspaces
		SET X, 0
		JSR drawwall
		SET X, 17
		JSR drawwall
		SUB Y, 1
		SET PC, drawmap_walloff
	:drawmap_clearspaces
		SET [vbo], 0
		SET Y, 8
		JSR drawxyoffset
		SET X, 0
		JSR drawxyoffset
		SET PC, POP

; check the previous positions of pacman and ghosts and draw either a dot or a space
:drawprevious
	SET X, [previous]
	SET I, 1
	SET Y, [previous+I]
	SET [vbo], 0
	JSR drawxyoffset
	SET I, 2
	:drawprevious_loop
		SET X, [previous+I]
		ADD I, 1
		SET Y, [previous+I]
		JSR checkdot
		SET [vbo], 0
		IFE C, 1
			SET [vbo], [dotmap]
		JSR drawxyoffset
		ADD I, 1
		IFE I, 10
			SET PC, POP
		SET PC, drawprevious_loop

; only called once
:drawscoreboard
	SET Y, 2
	SET X, 4
	SET I, 0
	:b_loop
		IFE I, 25
			SET PC, POP
		IFE I, 7
			JSR b_incry
		IFE I, 13
			JSR b_incry
		IFE I, 19
			JSR b_incry
		SET [vbo], [text+I]
		BOR [vbo], 0xf000
		JSR drawxy
		ADD X, 1
		ADD I, 1
		SET PC, b_loop
	:b_incry
		ADD Y, 2
		SET X, 4
		SET PC, POP

; draw the score, time and lives to the screen
:drawscore
	SET A, [score]
	SET X, 9
	SET Y, 5
	JSR drawnumber
	SET A, [gametime]
	SET X, 9
	SET Y, 7
	JSR drawnumber
	SET A, [lives]
	SET X, 9
	SET Y, 9
	JSR drawnumber
	SET PC, POP

; splits a number into digits and draws them on the screen 
:drawnumber
	SET I, 0
	:d_loop
		IFE A, 0
			SET PC, d_checkzero
		SET B, A
		MOD B, 10
		DIV A, 10
		ADD B, 48
		BOR B, 0xf000
		SET [vbo], B
		JSR drawxy
		ADD I, 1
		SUB X, 1
		SET PC, d_loop
	:d_checkzero
		IFN I, 0
			SET PC, POP
		SET [vbo], 0xf030
		JSR drawxy
		SET PC, POP
	
:drawpacman
	SET I, 1
	SET X, [pacman+I]
	ADD I, 1
	SET Y, [pacman+I]
	SET [vbo], [pacman]
	JSR drawxyoffset
	SET PC, POP

:drawghosts
	SET I, 1
	SET [vbo], [ghosts]
	:c_loop
		IFE I, 17
			SET PC, POP
		SET X, [ghosts+I]
		ADD I, 1
		SET Y, [ghosts+I]
		JSR drawxyoffset
		ADD I, 3
		SET PC, c_loop
	
:drawwall
	SET [vbo], [wallmap]
	JSR drawxyoffset
	SET PC, POP

:drawdot
	SET [vbo], [dotmap]
	JSR drawxyoffset
	SET PC, POP

;;; DATA ;;;

:pacman     DAT 0xe043, 5, 12, 2, 0
:previous   DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
:wallmap    DAT 0x9123, 0x180, 0x6db6, 0, 0x6bd6, 0x6996, 0xc30, 0xe817, 0x3c0, 0xe817, 0, 0x33cc, 0
:dotmap     DAT 0x602e, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
:ghosts		DAT 0xa240, 3, 1, 1, 10, 13, 3, 0, 8, 9, 7, 0, 6, 10, 7, 1, 3
:offset		DAT 14
:keypointer DAT 0x9000
:vbo		DAT 0		; our vertex buffer object ! every game needs one
:key		DAT 0		; contains the last key press
:score      DAT 0
:gametime   DAT 0, 0
:lives      DAT 5
:text		DAT "PACMAN!Score:Time :Lives:"
:pause		DAT 0
:pausetext  DAT "PAUSED (P)"
:wintext	DAT "AMAZINGVICTORY!"
:failtext	DAT "PITIFULPERFORMANCE!"
:random		DAT 0
:gamespeed	DAT 2000